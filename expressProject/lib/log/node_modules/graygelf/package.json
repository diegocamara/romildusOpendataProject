{
  "name": "graygelf",
  "version": "1.0.0",
  "description": "A complete GELF client, server, and proxy for Graylog2",
  "main": "index.js",
  "scripts": {
    "test": "istanbul cover tape \"test/**/*-test.js\"",
    "lint": "eslint --no-ignore test serve.js index.js",
    "ci-test": "istanbul cover tape \"test/**/*-test.js\" > test.tap && istanbul report clover",
    "start": "node server.js"
  },
  "keywords": [
    "logging",
    "graylog2",
    "gelf",
    "client",
    "server",
    "proxy"
  ],
  "author": {
    "name": "Marc Harter",
    "email": "wavded@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "split": "^0.3.0",
    "microtime": "^1.0.1"
  },
  "devDependencies": {
    "eslint": "^0.8.2",
    "istanbul": "^0.3.2",
    "mocha": "1.16.2",
    "tape": "^3.0.0"
  },
  "optionalDependencies": {
    "microtime": "^1.0.1"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "readme": "# GrayGelf [![Build Status](https://secure.travis-ci.org/wavded/graygelf.svg)](http://travis-ci.org/wavded/graygelf) [![Coverage Status](https://img.shields.io/coveralls/wavded/graygelf.svg)](https://coveralls.io/r/wavded/graygelf)\n\nGrayLog2 GELF UDP logging, streaming, chunking, and more.  Production tested.  Includes client and server implementations.  AFAIK a complete [GELF](http://graylog2.org/gelf#specs) implementation.\n\n![GrayGelf](https://raw.github.com/wavded/graygelf/master/graygelf.png)\n\n## Install\n\n```\nnpm install graygelf\n```\n\n[![NPM](https://nodei.co/npm/graygelf.png?downloads=true)](https://nodei.co/npm/graygelf)\n\n## Example\n\n```js\nvar log = require('graygelf')('graylog.server.local')\nlog.on('message', console.log) // output messages to console\n\n// setup global custom fields to be passed with every message\nlog.fields.facility = 'redicomps'\n\n// printf style \"hello world\"\nlog.info('hello %s', 'world')\n\n// concat by space style \"hello world\"\nlog.info('hello', 'world')\n\n// include a full message and custom fields using .a(ttach)\nlog.info.a('short', 'full', { foo: 'bar' })\nlog.info.a('short', 'full', { foo: 'bar' })\n\n// if an Error is passed as the only argument...\nvar er = new Error('oh no!')\nlog.info(er)\n// ... it expands to:\nlog.info.a(er.message, er.stack)\n\n// writable streams can be created\nvar infostream = log.stream('info')\nvar rstream = require('fs').createReadStream(__filename)\nrstream.pipe(infostream) // lines automatically split up and sent seperately\n\n// raw gelf: version, host, and timestamp will be supplied if missing\nlog.raw({\n  // version: '1.1',\n  // host: 'wavded',\n  short_message: 'oh no!',\n  full_message: 'howdy',\n  // timestamp: 1412087767.704356,\n  level: 6,\n  _foo: 'bar'\n})\n```\n\n## Setup\n\nBy `host` string (uses defaults below for other options):\n\n```js\nvar log = require('graygelf')('graylog.server.local')\n```\n\nBy `options` object:\n\n```js\nvar log = require('graygelf'){{\n  host: 'graylog.server.local',\n  port: 23923\n})\n```\n\nAvailable `options` are:\n\n```\nhost\n  - graylog host (default: 'localhost')\nport\n  - graylog port (default: 12201)\nchunkSize\n  - size of chunked messages in bytes (default: 1240)\ncompressType\n  - compression 'gzip' or 'deflate' (default: 'deflate')\nmock\n  - don't send messages to GrayLog2 (default: false)\n```\n\n## API\n\n### event: error\n\nEmits errors that may occur while parsing and sending GELF messages.\n\n### event: message\n\nEmits GELF JSON messages that will be send over UDP.  Useful for redirecting output to stdout in development.\n\n```js\nlog.on('message', function (gelf) {\n  console.log(gelf.level, gelf.short_message, gelf.long_message)\n})\n```\n\n### log.fields\n\nAdd global custom fields to be included in every message.  Custom fields allow you to more interesting searches and sorting inside GrayLog2 servers.\n\n```js\nlog.fields.facility = 'facility'\n```\n\nNote: `fields` is plain JavaScript object.\n\n### log{level}(message)\n\nGrayGelf maps the syslog levels to functions.  All functions have the same semantics as `console.log` (i.e. [printf style](http://nodejs.org/api/util.html#util_util_format_format)):\n\n```js\nlog.emerg('oh %s', 's*#t')              // 0 - alias: panic\nlog.alert('act', 'immediately')         // 1\nlog.crit('act %j', [ 'really soon' ])   // 2\nlog.error('expected %d, got %d', 1, 5)  // 3 - alias: err\nlog.warn('take note, it may bite')      // 4 - alias: warning\nlog.notice('unusual %s', 'behavior')    // 5\nlog.info('hello', 'world')              // 6\nlog.debug('value is', a)                // 7\n```\n\n### log{level}.a(short, long, custom)\n\nThere also is an `a(ttach)` method to include a full message.\n\n```js\nlog.crit.a('short message', 'full message')\n```\n\nThe `a(ttach)` method can have an optional third argument to define custom fields that will be passed to Graylog2.\n\n```js\nlog.info.a('short message', 'full message', { custom: 'field' })\n```\n\n### log.stream(level)\n\nCreate a writable stream to pipe log messages into:\n\n```js\nvar stream = log.stream('info')\n```\n\nStreams automatically break lines up and pass each line to GrayLog2 at the specified level.\n\n### log.raw(gelf)\n\nPass a raw [GELF](http://www.graylog2.org/resources/gelf/specification) message.  The following fields will be populated if absent: `version`, `host`, and `timestamp`.\n\n```js\nlog.raw({\n  version: '1.1',\n  host: 'wavded',\n  short_message: 'oh no!',\n  full_message: 'howdy',\n  timestamp: 1412087767.704356,\n  level: 6,\n  _foo: 'custom field'\n})\n```\n\nNote: No global custom fields (`log.fields`) are included when using `log.raw`.\n\n## Server\n\nMake your own GrayLog UDP server or proxy messages to GrayLog.  A GrayGelf server handles `zlib`, `gzip` and GELF chunked messages.\n\n### Example\n\n```js\nvar gelfserver = require('graylog/server')\nvar server = gelfserver()\nserver.on('message', function (gelf) {\n  // handle parsed gelf json\n  console.log('received message', msg)\n})\nserver.listen(12201)\n```\n\n### event: message\n\nEmits parsed GELF JSON messages.\n\n### event: data\n\nEmits raw GELF buffers (useful for proxying).\n\n### event: error\n\nEmits errors captured from udp or parsing.\n\n### server.listen(port = 12201, address = \"0.0.0.0\")\n\nStart listening on a port and bind address.  Both parameters are optional. Defaults to typical GrayLog2 server defaults.\n\n### server.close()\n\nClose down a server and stop receiving messages.\n\n### server.unref()\n\nAllow the Node process to terminate if the server is the only thing keeping it alive.\n\n### server.pipe(client)\n\n```js\nvar server = require('graygelf/server')().listen()\nvar client = require('graygelf')('proxy-dest.graylog.local')\n\nserver.pipe(client) // establish proxy (straight UDP transfer)\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014 Marc Harter <wavded@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "_id": "graygelf@1.0.0",
  "dist": {
    "shasum": "76e83e85661c515e32920348e170784d8d360516"
  },
  "_from": "graygelf@^1.0.0",
  "_resolved": "https://registry.npmjs.org/graygelf/-/graygelf-1.0.0.tgz"
}
